name: Docker Image CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "*/10 * * * *" # Runs every 10 minutes to check container status

jobs:

  build:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'global' || 'dev' }}
    steps:
      - uses: actions/checkout@v4
      - name: Create .env file
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "BOT_TOKEN=${{ vars.BOT_TOKEN }}" >> .env
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "BOT_TOKEN=${{ vars.BOT_TOKEN_DEV }}" >> .env
          fi

          echo "TYPE=${{ vars.TYPE }}" >> .env
          echo "PROJECT_ID=${{ vars.PROJECT_ID }}" >> .env
          echo "PRIVATE_KEY_ID=${{ vars.PRIVATE_KEY_ID }}" >> .env
          echo "PRIVATE_KEY=${{ vars.PRIVATE_KEY }}" >> .env
          echo "CLIENT_EMAIL=${{ vars.CLIENT_EMAIL }}" >> .env
          echo "CLIENT_ID=${{ vars.CLIENT_ID }}" >> .env
          echo "TOKEN_URI=${{ vars.TOKEN_URI }}" >> .env
          echo "AUTH_URI=${{ vars.AUTH_URI }}" >> .env
          echo "AUTH_PROVIDER_X509_CERT_URL=${{ vars.AUTH_PROVIDER_X509_CERT_URL }}" >> .env
          echo "CLIENT_X509_CERT_URL=${{ vars.CLIENT_X509_CERT_URL }}" >> .env
          echo "DB_HOST=${{ vars.DB_HOST }}" >> .env
          echo "DB_PORT=${{ vars.DB_PORT }}" >> .env
          echo "DB_NAME=${{ vars.DB_NAME }}" >> .env
          echo "DB_USER=${{ vars.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ vars.DB_PASSWORD }}" >> .env
          echo "PHONE=${{ vars.PHONE }}" >> .env
          echo "API_HASH=${{ vars.API_HASH }}" >> .env
          echo "API_ID=${{ vars.API_ID }}" >> .env
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ vars.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.project_name }}:${{ github.ref == 'refs/heads/main' && 'main' || 'dev' }}

      - name: Log out from DockerHub
        run: docker logout

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'global' || 'dev' }}
    steps:
      - name: logging
        run: |
          echo ${{ vars.SERVER_HOST }}
      - name: SSH into server and pull image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          password: ${{ vars.SSH_PASSWORD }}
          script: |
            image_tag=${{ github.ref == 'refs/heads/main' && 'main' || 'dev' }}
            current_container=$(docker ps --filter "ancestor=${{ vars.DOCKERHUB_USERNAME }}/${{ vars.PROJECT_NAME }}:$image_tag" --format "{{.Names}}")
            if [ -n "$current_container" ]; then
              docker stop $current_container
              docker rm $current_container
            fi
            docker pull ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.PROJECT_NAME }}:$image_tag
            docker stop real_estate_telegram_bot_container || true
            docker rm real_estate_telegram_bot_container || true
            docker images -a | grep none | awk '{ print $3; }' | xargs docker rmi --force
            docker run -d --name real_estate_telegram_bot_container

  monitor:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'global' || 'dev' }}
    steps:
      - name: SSH into server and check container status
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          password: ${{ vars.SSH_PASSWORD }}
          script: |
            if ! docker ps | grep -q "real_estate_telegram_bot_container"; then
              image_tag=${{ github.ref == 'refs/heads/main' && 'main' || 'dev' }}
              echo "status=unhealthy" >> $GITHUB_ENV
              echo "Restarting container..."
              docker pull ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.PROJECT_NAME }}:$image_tag
              docker stop real_estate_telegram_bot_container || true
              docker rm real_estate_telegram_bot_container || true
              docker run -d --name real_estate_telegram_bot_container ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.PROJECT_NAME }}:$image_tag
            else
              echo "status=healthy" >> $GITHUB_ENV

      - name: Send notification if container was restarted
        if: env.status == 'unhealthy'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: dubaibuildingbot@gmail.com
          password: ${{ vars.EMAIL_PASSWORD }}
          subject: "Alert: Docker Container Restarted!"
          body: "The Docker container 'real_estate_telegram_bot_container' was down and has been restarted on the server."
          to: dubaibuildingbot@gmail.com
          from: dubaibuildingbot@gmail.com
